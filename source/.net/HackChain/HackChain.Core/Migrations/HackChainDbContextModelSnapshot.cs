// <auto-generated />
using System;
using HackChain.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HackChain.Core.Migrations
{
    [DbContext(typeof(HackChainDbContext))]
    partial class HackChainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HackChain.Core.Model.Account", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<long>("Nonce")
                        .HasColumnType("bigint");

                    b.HasKey("Address");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("HackChain.Core.Model.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentBlockHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Difficulty")
                        .HasColumnType("bigint");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<long>("Nonce")
                        .HasColumnType("bigint");

                    b.Property<string>("PreviousBlockHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("HackChain.Core.Model.Transaction", b =>
                {
                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("BlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Fee")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsValidForNextBlock")
                        .HasColumnType("bit");

                    b.Property<long>("Nonce")
                        .HasColumnType("bigint");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Hash");

                    b.HasIndex("BlockId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("HackChain.Core.Model.Transaction", b =>
                {
                    b.HasOne("HackChain.Core.Model.Block", "Block")
                        .WithMany("Data")
                        .HasForeignKey("BlockId");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("HackChain.Core.Model.Block", b =>
                {
                    b.Navigation("Data");
                });
#pragma warning restore 612, 618
        }
    }
}
